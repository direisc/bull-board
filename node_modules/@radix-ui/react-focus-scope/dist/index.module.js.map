{"mappings":"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","sources":["./packages/react/focus-scope/src/FocusScope.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\nconst AUTOFOCUS_ON_MOUNT = 'focusScope.autoFocusOnMount';\nconst AUTOFOCUS_ON_UNMOUNT = 'focusScope.autoFocusOnUnmount';\nconst EVENT_OPTIONS = { bubbles: false, cancelable: true };\n\ntype FocusableTarget = HTMLElement | { focus(): void };\n\n/* -------------------------------------------------------------------------------------------------\n * FocusScope\n * -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_SCOPE_NAME = 'FocusScope';\n\ntype FocusScopeOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof Primitive>,\n  {\n    /**\n     * Whether focus should be trapped within the FocusScope\n     * (default: false)\n     */\n    trapped?: boolean;\n\n    /**\n     * Event handler called when auto-focusing on mount.\n     * Can be prevented.\n     */\n    onMountAutoFocus?: (event: Event) => void;\n\n    /**\n     * Event handler called when auto-focusing on unmount.\n     * Can be prevented.\n     */\n    onUnmountAutoFocus?: (event: Event) => void;\n  }\n>;\n\ntype FocusScopePrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  FocusScopeOwnProps\n>;\n\nconst FocusScope = React.forwardRef((props, forwardedRef) => {\n  const {\n    trapped = false,\n    onMountAutoFocus: onMountAutoFocusProp,\n    onUnmountAutoFocus: onUnmountAutoFocusProp,\n    ...scopeProps\n  } = props;\n  const [container, setContainer] = React.useState<HTMLElement | null>(null);\n  const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);\n  const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);\n  const lastFocusedElementRef = React.useRef<HTMLElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));\n\n  const wrapped = trapped;\n  const contained = trapped;\n\n  const focusScope = React.useRef({\n    paused: false,\n    pause() {\n      this.paused = true;\n    },\n    resume() {\n      this.paused = false;\n    },\n  }).current;\n\n  // Takes care of containing focus if focus is moved outside programmatically for example\n  React.useEffect(() => {\n    if (contained) {\n      function handleFocusIn(event: FocusEvent) {\n        if (focusScope.paused || !container) return;\n        const target = event.target as HTMLElement | null;\n        if (container.contains(target)) {\n          lastFocusedElementRef.current = target;\n        } else {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }\n\n      function handleFocusOut(event: FocusEvent) {\n        if (focusScope.paused || !container) return;\n        if (!container.contains(event.relatedTarget as HTMLElement | null)) {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }\n\n      document.addEventListener('focusin', handleFocusIn);\n      document.addEventListener('focusout', handleFocusOut);\n      return () => {\n        document.removeEventListener('focusin', handleFocusIn);\n        document.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n  }, [contained, container, focusScope.paused]);\n\n  React.useEffect(() => {\n    if (container) {\n      focusScopesStack.add(focusScope);\n      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement as HTMLElement | null;\n\n      // we need to setup the listeners before we `dispatchEvent`\n      container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n      container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n\n      const mountEvent = new Event(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);\n      container.dispatchEvent(mountEvent);\n      if (!mountEvent.defaultPrevented) {\n        focusFirst(getTabbableCandidates(container), { select: true });\n        if (document.activeElement === PREVIOUSLY_FOCUSED_ELEMENT) {\n          focus(container);\n        }\n      }\n\n      return () => {\n        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n\n        // We hit a react bug (fixed in v17) with focusing in unmount.\n        // We need to delay the focus a little to get around it for now.\n        // See: https://github.com/facebook/react/issues/17894\n        setTimeout(() => {\n          const unmountEvent = new Event(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);\n          container.dispatchEvent(unmountEvent);\n          if (!unmountEvent.defaultPrevented) {\n            focus(PREVIOUSLY_FOCUSED_ELEMENT ?? document.body, { select: true });\n          }\n          // we need to remove the listener after we `dispatchEvent`\n          container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n\n          focusScopesStack.remove(focusScope);\n        }, 0);\n      };\n    }\n  }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);\n\n  // Takes care of containing focus and wrapping focus (when tabbing whilst at the edges)\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (!wrapped && !contained) return;\n      if (focusScope.paused) return;\n\n      const isTabKey = event.key === 'Tab' && !event.altKey && !event.ctrlKey && !event.metaKey;\n      const focusedElement = document.activeElement as HTMLElement | null;\n\n      if (isTabKey && focusedElement) {\n        const container = event.currentTarget as HTMLElement;\n        const [first, last] = getTabbableEdges(container);\n        const hasTabbableElementsInside = first && last;\n\n        // we can only wrap focus if we have tabbable edges\n        if (!hasTabbableElementsInside) {\n          if (focusedElement === container) event.preventDefault();\n        } else {\n          if (!event.shiftKey && focusedElement === last) {\n            event.preventDefault();\n            if (wrapped) focus(first, { select: true });\n          } else if (event.shiftKey && focusedElement === first) {\n            event.preventDefault();\n            if (wrapped) focus(last, { select: true });\n          }\n        }\n      }\n    },\n    [wrapped, contained, focusScope.paused]\n  );\n\n  return <Primitive tabIndex={-1} {...scopeProps} ref={composedRefs} onKeyDown={handleKeyDown} />;\n}) as FocusScopePrimitive;\n\nFocusScope.displayName = FOCUS_SCOPE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Attempts focusing the first element in a list of candidates.\n * Stops when focus has actually moved.\n */\nfunction focusFirst(candidates: HTMLElement[], { select = false } = {}) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    focus(candidate, { select });\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Returns the first and last tabbable elements inside a container.\n */\nfunction getTabbableEdges(container: HTMLElement) {\n  const candidates = getTabbableCandidates(container);\n  const first = findVisible(candidates, container);\n  const last = findVisible(candidates.reverse(), container);\n  return [first, last] as const;\n}\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\n/**\n * Returns the first visible element in a list.\n * NOTE: Only checks visibility up to the `container`.\n */\nfunction findVisible(elements: HTMLElement[], container: HTMLElement) {\n  for (const element of elements) {\n    // we stop checking if it's hidden at the `container` level (excluding)\n    if (!isHidden(element, { upTo: container })) return element;\n  }\n}\n\nfunction isHidden(node: HTMLElement, { upTo }: { upTo?: HTMLElement }) {\n  if (getComputedStyle(node).visibility === 'hidden') return true;\n  while (node) {\n    // we stop at `upTo` (excluding it)\n    if (upTo !== undefined && node === upTo) return false;\n    if (getComputedStyle(node).display === 'none') return true;\n    node = node.parentElement as HTMLElement;\n  }\n  return false;\n}\n\nfunction isSelectableInput(element: any): element is FocusableTarget & { select: () => void } {\n  return element instanceof HTMLInputElement && 'select' in element;\n}\n\nfunction focus(element?: FocusableTarget | null, { select = false } = {}) {\n  // only focus if that element is focusable\n  if (element && element.focus) {\n    const previouslyFocusedElement = document.activeElement;\n    // NOTE: we prevent scrolling on focus, to minimize jarring transitions for users\n    element.focus({ preventScroll: true });\n    // only select if its not the same element, it supports selection and we need to select\n    if (element !== previouslyFocusedElement && isSelectableInput(element) && select)\n      element.select();\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * FocusScope stack\n * -----------------------------------------------------------------------------------------------*/\n\ntype FocusScopeAPI = { paused: boolean; pause(): void; resume(): void };\nconst focusScopesStack = createFocusScopesStack();\n\nfunction createFocusScopesStack() {\n  /** A stack of focus scopes, with the active one at the top */\n  let stack: FocusScopeAPI[] = [];\n\n  return {\n    add(focusScope: FocusScopeAPI) {\n      // pause the currently active focus scope (at the top of the stack)\n      const activeFocusScope = stack[0];\n      if (focusScope !== activeFocusScope) {\n        activeFocusScope?.pause();\n      }\n      // remove in case it already exists (because we'll re-add it at the top of the stack)\n      stack = arrayRemove(stack, focusScope);\n      stack.unshift(focusScope);\n    },\n\n    remove(focusScope: FocusScopeAPI) {\n      stack = arrayRemove(stack, focusScope);\n      stack[0]?.resume();\n    },\n  };\n}\n\nfunction arrayRemove<T>(array: T[], item: T) {\n  const updatedArray = [...array];\n  const index = updatedArray.indexOf(item);\n  if (index !== -1) {\n    updatedArray.splice(index, 1);\n  }\n  return updatedArray;\n}\n\nconst Root = FocusScope;\n\nexport {\n  FocusScope,\n  //\n  Root,\n};\n"],"names":["EVENT_OPTIONS","bubbles","cancelable","FocusScope","React","forwardRef","props","forwardedRef","trapped","onMountAutoFocus","onMountAutoFocusProp","onUnmountAutoFocus","onUnmountAutoFocusProp","scopeProps","container","setContainer","useState","useCallbackRef","lastFocusedElementRef","useRef","composedRefs","useComposedRefs","node","wrapped","contained","focusScope","paused","pause","this","resume","current","useEffect","handleFocusIn","event","target","contains","focus","select","handleFocusOut","relatedTarget","document","addEventListener","removeEventListener","focusScopesStack","add","PREVIOUSLY_FOCUSED_ELEMENT","activeElement","mountEvent","Event","dispatchEvent","defaultPrevented","candidates","candidate","focusFirst","getTabbableCandidates","setTimeout","unmountEvent","body","remove","handleKeyDown","useCallback","isTabKey","key","altKey","ctrlKey","metaKey","focusedElement","currentTarget","first","last","findVisible","reverse","getTabbableEdges","shiftKey","preventDefault","_react","createElement","Primitive","_babelRuntimeHelpersEsmExtends","tabIndex","ref","onKeyDown","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","isHiddenInput","tagName","type","disabled","hidden","FILTER_SKIP","FILTER_ACCEPT","nextNode","push","currentNode","elements","element","isHidden","upTo","getComputedStyle","visibility","undefined","display","parentElement","previouslyFocusedElement","preventScroll","HTMLInputElement","isSelectableInput","stack","activeFocusScope","arrayRemove","unshift","_stack$","createFocusScopesStack","array","item","updatedArray","index","indexOf","splice","Root"],"version":3,"file":"index.module.js.map"}