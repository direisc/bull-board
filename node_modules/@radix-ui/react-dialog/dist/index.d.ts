import * as React from "react";
import { DismissableLayer } from "@radix-ui/react-dismissable-layer";
import { FocusScope } from "@radix-ui/react-focus-scope";
import { Primitive } from "@radix-ui/react-primitive";
import * as Polymorphic from "@radix-ui/react-polymorphic";
type DialogOwnProps = {
    open?: boolean;
    defaultOpen?: boolean;
    onOpenChange?(open: boolean): void;
};
export const Dialog: React.FC<DialogOwnProps>;
declare const TRIGGER_DEFAULT_TAG = "button";
type DialogTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type DialogTriggerPrimitive = Polymorphic.ForwardRefComponent<typeof TRIGGER_DEFAULT_TAG, DialogTriggerOwnProps>;
export const DialogTrigger: DialogTriggerPrimitive;
type DialogOverlayOwnProps = Polymorphic.Merge<Polymorphic.OwnProps<typeof DialogOverlayImpl>, {
    /**
     * Used to force mounting when more control is needed. Useful when
     * controlling animation with React animation libraries.
     */
    forceMount?: true;
}>;
export type DialogOverlayPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof DialogOverlayImpl>, DialogOverlayOwnProps>;
export const DialogOverlay: DialogOverlayPrimitive;
type DialogOverlayImplOwnProps = Polymorphic.OwnProps<typeof Primitive>;
type DialogOverlayImplPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof Primitive>, DialogOverlayImplOwnProps>;
declare const DialogOverlayImpl: DialogOverlayImplPrimitive;
type DialogContentOwnProps = Polymorphic.Merge<Polymorphic.OwnProps<typeof DialogContentImpl>, {
    /**
     * Used to force mounting when more control is needed. Useful when
     * controlling animation with React animation libraries.
     */
    forceMount?: true;
}>;
export type DialogContentPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof DialogContentImpl>, DialogContentOwnProps>;
export const DialogContent: DialogContentPrimitive;
type FocusScopeOwnProps = Polymorphic.OwnProps<typeof FocusScope>;
type DialogContentImplOwnProps = Polymorphic.Merge<Omit<Polymorphic.OwnProps<typeof DismissableLayer>, 'disableOutsidePointerEvents' | 'onFocusOutside' | 'onInteractOutside' | 'onDismiss'>, {
    /**
     * Event handler called when auto-focusing on open.
     * Can be prevented.
     */
    onOpenAutoFocus?: FocusScopeOwnProps['onMountAutoFocus'];
    /**
     * Event handler called when auto-focusing on close.
     * Can be prevented.
     */
    onCloseAutoFocus?: FocusScopeOwnProps['onUnmountAutoFocus'];
}>;
type DialogContentImplPrimitive = Polymorphic.ForwardRefComponent<Polymorphic.IntrinsicElement<typeof DismissableLayer>, DialogContentImplOwnProps>;
declare const DialogContentImpl: DialogContentImplPrimitive;
declare const TITLE_DEFAULT_TAG = "h2";
type DialogTitleOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type DialogTitlePrimitive = Polymorphic.ForwardRefComponent<typeof TITLE_DEFAULT_TAG, DialogTitleOwnProps>;
export const DialogTitle: DialogTitlePrimitive;
declare const DESCRIPTION_DEFAULT_TAG = "p";
type DialogDescriptionOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type DialogDescriptionPrimitive = Polymorphic.ForwardRefComponent<typeof DESCRIPTION_DEFAULT_TAG, DialogDescriptionOwnProps>;
export const DialogDescription: DialogDescriptionPrimitive;
declare const CLOSE_DEFAULT_TAG = "button";
type DialogCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;
export type DialogClosePrimitive = Polymorphic.ForwardRefComponent<typeof CLOSE_DEFAULT_TAG, DialogCloseOwnProps>;
export const DialogClose: DialogClosePrimitive;
export const LabelWarningProvider: React.Provider<{
    contentName: string;
    titleName: string;
    docsSlug: string;
}>;
export const Root: React.FC<DialogOwnProps>;
export const Trigger: DialogTriggerPrimitive;
export const Overlay: DialogOverlayPrimitive;
export const Content: DialogContentPrimitive;
export const Title: DialogTitlePrimitive;
export const Description: DialogDescriptionPrimitive;
export const Close: DialogClosePrimitive;

//# sourceMappingURL=index.d.ts.map
