{"mappings":"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","sources":["./packages/react/dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n};\n\nconst [DialogProvider, useDialogContext] = createContext<DialogContextValue>(DIALOG_NAME);\n\ntype DialogOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n};\n\nconst Dialog: React.FC<DialogOwnProps> = (props) => {\n  const { children, open: openProp, defaultOpen, onOpenChange } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      triggerRef={triggerRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\nconst TRIGGER_DEFAULT_TAG = 'button';\n\ntype DialogTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  DialogTriggerOwnProps\n>;\n\nconst DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useDialogContext(TRIGGER_NAME);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return (\n    <Primitive\n      type=\"button\"\n      aria-haspopup=\"dialog\"\n      aria-expanded={context.open}\n      aria-controls={context.contentId}\n      data-state={getState(context.open)}\n      {...triggerProps}\n      as={as}\n      ref={composedTriggerRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(true))}\n    />\n  );\n}) as DialogTriggerPrimitive;\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogOverlayImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogOverlayPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogOverlayImpl>,\n  DialogOverlayOwnProps\n>;\n\nconst DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...overlayProps } = props;\n  const context = useDialogContext(OVERLAY_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogOverlayImpl data-state={getState(context.open)} {...overlayProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogOverlayPrimitive;\n\ntype DialogOverlayImplOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogOverlayImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof Primitive>,\n  DialogOverlayImplOwnProps\n>;\n\nconst DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  return (\n    <Portal>\n      <Primitive {...props} ref={forwardedRef} />\n    </Portal>\n  );\n}) as DialogOverlayImplPrimitive;\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof DialogContentImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype DialogContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogContentImpl>,\n  DialogContentOwnProps\n>;\n\nconst DialogContent = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useDialogContext(CONTENT_NAME);\n  return (\n    <Presence present={forceMount || context.open}>\n      <DialogContentImpl data-state={getState(context.open)} {...contentProps} ref={forwardedRef} />\n    </Presence>\n  );\n}) as DialogContentPrimitive;\n\ntype FocusScopeOwnProps = Polymorphic.OwnProps<typeof FocusScope>;\n\ntype DialogContentImplOwnProps = Polymorphic.Merge<\n  Omit<\n    Polymorphic.OwnProps<typeof DismissableLayer>,\n    'disableOutsidePointerEvents' | 'onFocusOutside' | 'onInteractOutside' | 'onDismiss'\n  >,\n  {\n    /**\n     * Event handler called when auto-focusing on open.\n     * Can be prevented.\n     */\n    onOpenAutoFocus?: FocusScopeOwnProps['onMountAutoFocus'];\n\n    /**\n     * Event handler called when auto-focusing on close.\n     * Can be prevented.\n     */\n    onCloseAutoFocus?: FocusScopeOwnProps['onUnmountAutoFocus'];\n  }\n>;\n\ntype DialogContentImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DismissableLayer>,\n  DialogContentImplOwnProps\n>;\n\nconst DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n  // Make sure the whole tree has focus guards as our `Dialog` will be\n  // the last element in the DOM (beacuse of the `Portal`)\n  useFocusGuards();\n\n  // Hide everything from ARIA except the content\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n\n  return (\n    <>\n      <Portal>\n        <RemoveScroll>\n          <FocusScope\n            as={Slot}\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={onOpenAutoFocus}\n            onUnmountAutoFocus={onCloseAutoFocus}\n          >\n            <DismissableLayer\n              role=\"dialog\"\n              id={context.contentId}\n              aria-modal\n              aria-describedby={ariaDescribedBy || context.descriptionId}\n              // If `aria-label` is set, ensure `aria-labelledby` is undefined as to avoid confusion.\n              // Otherwise fallback to an explicit `aria-labelledby` or the ID used in the\n              // `DialogTitle`\n              aria-labelledby={ariaLabel ? undefined : ariaLabelledBy || context.titleId}\n              aria-label={ariaLabel || undefined}\n              {...contentProps}\n              ref={composedRefs}\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={composeEventHandlers(onPointerDownOutside, (event) => {\n                const originalEvent = event.detail.originalEvent as MouseEvent;\n                const isRightClick =\n                  originalEvent.button === 2 ||\n                  (originalEvent.button === 0 && originalEvent.ctrlKey === true);\n\n                // If the event is a right-click, we shouldn't close because\n                // it is effectively as if we right-clicked the `Overlay`.\n                if (isRightClick) event.preventDefault();\n              })}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            />\n          </FocusScope>\n        </RemoveScroll>\n      </Portal>\n      {process.env.NODE_ENV === 'development' && <LabelWarning contentRef={contentRef} />}\n    </>\n  );\n}) as DialogContentImplPrimitive;\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\nconst TITLE_DEFAULT_TAG = 'h2';\n\ntype DialogTitleOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogTitlePrimitive = Polymorphic.ForwardRefComponent<\n  typeof TITLE_DEFAULT_TAG,\n  DialogTitleOwnProps\n>;\n\nconst DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const { as = TITLE_DEFAULT_TAG, ...titleProps } = props;\n  const context = useDialogContext(TITLE_NAME);\n  return <Primitive id={context.titleId} {...titleProps} as={as} ref={forwardedRef} />;\n}) as DialogTitlePrimitive;\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\nconst DESCRIPTION_DEFAULT_TAG = 'p';\n\ntype DialogDescriptionOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogDescriptionPrimitive = Polymorphic.ForwardRefComponent<\n  typeof DESCRIPTION_DEFAULT_TAG,\n  DialogDescriptionOwnProps\n>;\n\nconst DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const { as = DESCRIPTION_DEFAULT_TAG, ...descriptionProps } = props;\n  const context = useDialogContext(DESCRIPTION_NAME);\n  return <Primitive id={context.descriptionId} {...descriptionProps} as={as} ref={forwardedRef} />;\n}) as DialogDescriptionPrimitive;\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\nconst CLOSE_DEFAULT_TAG = 'button';\n\ntype DialogCloseOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype DialogClosePrimitive = Polymorphic.ForwardRefComponent<\n  typeof CLOSE_DEFAULT_TAG,\n  DialogCloseOwnProps\n>;\n\nconst DialogClose = React.forwardRef((props, forwardedRef) => {\n  const { as = CLOSE_DEFAULT_TAG, ...closeProps } = props;\n  const context = useDialogContext(CLOSE_NAME);\n  return (\n    <Primitive\n      type=\"button\"\n      {...closeProps}\n      as={as}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n    />\n  );\n}) as DialogClosePrimitive;\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst LabelWarningContext = React.createContext({\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\nconst LabelWarningProvider = LabelWarningContext.Provider;\n\ntype LabelWarningProps = {\n  contentRef: React.RefObject<React.ElementRef<typeof DialogContent>>;\n};\n\nconst LabelWarning: React.FC<LabelWarningProps> = ({ contentRef }) => {\n  const labelWarningContext = React.useContext(LabelWarningContext);\n\n  const MESSAGE = `\\`${labelWarningContext.contentName}\\` requires a label for the component to be accessible for screen reader users.\n\nYou can label the \\`${labelWarningContext.contentName}\\` by passing a \\`${labelWarningContext.titleName}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a title by assigning it an \\`id\\` and passing the same value to the \\`aria-labelledby\\` prop in \\`${labelWarningContext.contentName}\\`. If the label is confusing or duplicative for sighted users, you can also pass a label directly by using the \\`aria-label\\` prop.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${labelWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    const hasLabel =\n      contentRef.current?.getAttribute('aria-label') ||\n      document.getElementById(contentRef.current?.getAttribute('aria-labelledby')!);\n\n    if (!hasLabel) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  LabelWarningProvider,\n};\nexport type {\n  DialogTriggerPrimitive,\n  DialogOverlayPrimitive,\n  DialogContentPrimitive,\n  DialogTitlePrimitive,\n  DialogDescriptionPrimitive,\n  DialogClosePrimitive,\n};\n"],"names":["DialogProvider","useDialogContext","createContext","Dialog","props","children","open","openProp","defaultOpen","onOpenChange","triggerRef","React","useRef","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","$da81f3af863821fb8a193d321c41d$var$DialogProvider","contentId","useId","titleId","descriptionId","TRIGGER_DEFAULT_TAG","DialogTrigger","forwardRef","forwardedRef","as","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","_babelRuntimeHelpersEsmExtends","type","aria-haspopup","aria-expanded","aria-controls","data-state","getState","ref","onClick","composeEventHandlers","DialogOverlay","forceMount","overlayProps","Presence","present","$da81f3af863821fb8a193d321c41d$var$DialogOverlayImpl","DialogOverlayImpl","Portal","DialogContent","contentProps","$da81f3af863821fb8a193d321c41d$var$DialogContentImpl","DialogContentImpl","aria-label","ariaLabel","aria-labelledby","ariaLabelledBy","aria-describedby","ariaDescribedBy","onOpenAutoFocus","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","contentRef","composedRefs","useFocusGuards","useEffect","content","current","hideOthers","Fragment","RemoveScroll","FocusScope","Slot","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","role","id","aria-modal","undefined","disableOutsidePointerEvents","event","originalEvent","detail","button","ctrlKey","preventDefault","onFocusOutside","onDismiss","TITLE_DEFAULT_TAG","DialogTitle","titleProps","DESCRIPTION_DEFAULT_TAG","DialogDescription","descriptionProps","CLOSE_DEFAULT_TAG","DialogClose","closeProps","LabelWarningContext","contentName","titleName","docsSlug","LabelWarningProvider","Provider","Root","Trigger","Overlay","Content","Title","Description","Close"],"version":3,"file":"index.module.js.map"}