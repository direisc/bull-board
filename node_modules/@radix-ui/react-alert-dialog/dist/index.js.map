{"mappings":"IAAgCA,8UAAAA,8CAClBA,EAAEC,WAAaD,EAAEE,QAAUF,EAWzC,SAASG,EAAuBC,EAAMC,GAcpC,OAbAC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,ECZT,MAEMS,EAA4EC,gBAChFC,EAAAC,cAACC,EAAgBC,KAASJ,yBAS5B,MAOEK,EACAC,GACEC,EATiB,sBAgBfC,eAAqBC,EAAMC,YAAW,CAACV,EAAOW,KAClD,MAAMC,SAAEA,KAAaC,GAAiBb,EAChCc,EAAaL,EAAMM,OAAoD,MACvEC,EAAeC,EAAgBN,EAAcG,GAC7CI,EAAYT,EAAMM,OAA0D,mBAElF,OACEd,EAAAC,cAACC,EAAgBgB,qBAAjB,CACEC,MAAOX,EAAMY,SACX,KAAA,CAASC,YAzBI,qBAyBuBC,UAAWC,EAAYC,SAAU,kBACrE,kBAGFxB,EAAAC,cAACwB,EAAD,CAA4BR,UAAWA,gBACrCjB,EAAAC,cAACC,EAAgBwB,QAAjBC,EAAA,CACEC,KAAK,eACDhB,EAFN,CAGEiB,IAAKd,EACLe,gBAAiBC,EAAqBnB,EAAakB,iBAAkBE,IAAU,IAAAC,EAC7ED,EAAME,iBACN,QAAAD,EAAAhB,EAAUkB,eAAV,IAAAF,GAAAA,EAAmBG,MAAM,CAAEC,eAAe,sBAS5CrC,EAAAC,cAACqC,EAAD,KAAY3B,IACX,qCAaX,MAQM4B,eAAoB/B,EAAMC,YAAW,CAACV,EAAOW,KACjD,MAAMO,UAAEA,GAAcZ,EATJ,qBAUZwB,EAAMb,EAAgBN,EAAcO,gBAC1C,OAAOjB,EAAAC,cAACC,EAAgBsC,MAAjBb,EAAA,GAA2B5B,EAA3B,CAAkC8B,IAAKA,oCAOhD,MAAMY,EAAqBC,EAAgBC,EAAgBC,QAAS,CAClEC,YAAa,oDAEf,MAAMC,EAAqBJ,EAAgBC,EAAgBI,QAAS,CAClEF,YAAa,oDAEf,MAAMG,EAAoBN,EAAgBC,EAAgBH,MAAO,CAC/DK,YAAa,kDAEf,MAAMtB,EAAa,mBACb0B,EAAmBP,EAAgBC,EAAgBO,MAAO,CAC9DL,YAAatB,+BAEf,MACM4B,EAAyBT,EAAgBC,EAAgBS,YAAa,CAC1EP,YAFuB,4DAWzB,MAmBM1C,EAAOL,iBACb,MAAM8C,EAAUH,oBAChB,MAAMM,EAAUD,oBAChB,MAAMpB,EAAUnB,oBAChB,MAAM8C,EAASL,mBACf,MAAMM,EAASf,mBACf,MAAMW,EAAQD,kBACd,MAAMG,EAAcD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/alert-dialog/src/AlertDialog.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { createContext } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { extendPrimitive } from '@radix-ui/react-primitive';\nimport { Slottable } from '@radix-ui/react-slot';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\nconst AlertDialog: React.FC<React.ComponentProps<typeof DialogPrimitive.Root>> = (props) => (\n  <DialogPrimitive.Root {...props} />\n);\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<React.ElementRef<typeof AlertDialogCancel> | null>;\n};\n\nconst [\n  AlertDialogContentProvider,\n  useAlertDialogContentContext,\n] = createContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogPrimitive.Content>,\n  Polymorphic.OwnProps<typeof DialogPrimitive.Content>\n>;\n\nconst AlertDialogContent = React.forwardRef((props, forwardedRef) => {\n  const { children, ...contentProps } = props;\n  const contentRef = React.useRef<React.ElementRef<typeof AlertDialogContent>>(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  const cancelRef = React.useRef<React.ElementRef<typeof AlertDialogCancel> | null>(null);\n\n  return (\n    <DialogPrimitive.LabelWarningProvider\n      value={React.useMemo(\n        () => ({ contentName: CONTENT_NAME, titleName: TITLE_NAME, docsSlug: 'alert-dialog' }),\n        []\n      )}\n    >\n      <AlertDialogContentProvider cancelRef={cancelRef}>\n        <DialogPrimitive.Content\n          role=\"alertdialog\"\n          {...contentProps}\n          ref={composedRefs}\n          onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n            event.preventDefault();\n            cancelRef.current?.focus({ preventScroll: true });\n          })}\n        >\n          {/**\n           * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n           * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n           * This is because we want the accessibility checks to run only once the content is actually\n           * open and that behaviour is already encapsulated in `DialogContent`.\n           */}\n          <Slottable>{children}</Slottable>\n          {process.env.NODE_ENV === 'development' && <DescriptionWarning contentRef={contentRef} />}\n        </DialogPrimitive.Content>\n      </AlertDialogContentProvider>\n    </DialogPrimitive.LabelWarningProvider>\n  );\n}) as AlertDialogContentPrimitive;\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelOwnProps = Polymorphic.OwnProps<typeof DialogPrimitive.Close>;\ntype AlertDialogCancelPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof DialogPrimitive.Close>,\n  AlertDialogCancelOwnProps\n>;\n\nconst AlertDialogCancel = React.forwardRef((props, forwardedRef) => {\n  const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME);\n  const ref = useComposedRefs(forwardedRef, cancelRef);\n  return <DialogPrimitive.Close {...props} ref={ref} />;\n}) as AlertDialogCancelPrimitive;\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst AlertDialogTrigger = extendPrimitive(DialogPrimitive.Trigger, {\n  displayName: 'AlertDialogTrigger',\n});\nconst AlertDialogOverlay = extendPrimitive(DialogPrimitive.Overlay, {\n  displayName: 'AlertDialogOverlay',\n});\nconst AlertDialogAction = extendPrimitive(DialogPrimitive.Close, {\n  displayName: 'AlertDialogAction',\n});\nconst TITLE_NAME = 'AlertDialogTitle';\nconst AlertDialogTitle = extendPrimitive(DialogPrimitive.Title, {\n  displayName: TITLE_NAME,\n});\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\nconst AlertDialogDescription = extendPrimitive(DialogPrimitive.Description, {\n  displayName: DESCRIPTION_NAME,\n});\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<React.ElementRef<typeof AlertDialogContent>>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type { AlertDialogContentPrimitive, AlertDialogCancelPrimitive };\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","AlertDialog","props","_react","createElement","_radixUiReactDialog","Root","AlertDialogContentProvider","useAlertDialogContentContext","createContext","AlertDialogContent","React","forwardRef","forwardedRef","children","contentProps","contentRef","useRef","composedRefs","useComposedRefs","cancelRef","LabelWarningProvider","value","useMemo","contentName","titleName","TITLE_NAME","docsSlug","$ce6149552ca6be39fd0092c861815af$var$AlertDialogContentProvider","Content","_babelRuntimeHelpersExtends","role","ref","onOpenAutoFocus","composeEventHandlers","event","_cancelRef$current","preventDefault","current","focus","preventScroll","Slottable","AlertDialogCancel","Close","AlertDialogTrigger","extendPrimitive","DialogPrimitive","Trigger","displayName","AlertDialogOverlay","Overlay","AlertDialogAction","AlertDialogTitle","Title","AlertDialogDescription","Description","Action","Cancel"],"version":3,"file":"index.js.map"}